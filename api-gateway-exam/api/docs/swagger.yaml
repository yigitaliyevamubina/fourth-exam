definitions:
  models.AddPolicyRequest:
    properties:
      policy:
        $ref: '#/definitions/models.Policy'
    type: object
  models.AdminLoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.AdminLoginResp:
    properties:
      access_token:
        type: string
    type: object
  models.AdminReq:
    properties:
      age:
        type: integer
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      post_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.DeleteAdmin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.ListComments:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      count:
        type: integer
    type: object
  models.ListPosts:
    properties:
      count:
        type: integer
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.ListRolePolicyResp:
    properties:
      policies:
        items:
          $ref: '#/definitions/models.Policy'
        type: array
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Message:
    properties:
      message:
        type: string
    type: object
  models.Policy:
    properties:
      endpoint:
        type: string
      method:
        type: string
      role:
        type: string
    type: object
  models.Post:
    properties:
      category:
        type: string
      content:
        type: string
      created_at:
        type: string
      dislikes:
        type: integer
      id:
        type: string
      likes:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      views:
        type: integer
    type: object
  models.PostReq:
    properties:
      post_id:
        type: string
    type: object
  models.PostWithComments:
    properties:
      category:
        type: string
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      dislikes:
        type: integer
      id:
        type: string
      likes:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      views:
        type: integer
    type: object
  models.RbacAllRolesResp:
    properties:
      roles:
        items:
          type: string
        type: array
    type: object
  models.RefreshTokenUpdateReq:
    properties:
      refresh_token:
        type: string
    type: object
  models.RegisterUserResponse:
    properties:
      message:
        type: string
    type: object
  models.Status:
    properties:
      success:
        type: boolean
    type: object
  models.SuperAdminMessage:
    properties:
      message:
        type: string
    type: object
  models.UserModel:
    properties:
      access_token:
        type: string
      biography:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      refresh_token:
        type: string
      updated_at:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.UserRequest:
    properties:
      biography:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.UserWithProducts:
    properties:
      posts:
        items:
          $ref: '#/definitions/models.PostWithComments'
        type: array
      user:
        $ref: '#/definitions/models.UserModel'
    type: object
host: localhost:4040
info:
  contact: {}
  description: Auth, Role-management, User, Post, Comment
  title: Social web
  version: "1.0"
paths:
  /v1/auth/create:
    post:
      consumes:
      - application/json
      description: Create a new admin if you are a superadmin
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminReq'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create admin
      tags:
      - Auth
  /v1/auth/delete:
    delete:
      consumes:
      - application/json
      description: delete admin if you are a superadmin
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.DeleteAdmin'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete admin
      tags:
      - Auth
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: login as admin
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.AdminLoginReq'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AdminLoginResp'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: login
      tags:
      - Auth
  /v1/comment/{id}:
    get:
      consumes:
      - application/json
      description: Get comment
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get comment by id
      tags:
      - Comment
  /v1/comment/create:
    post:
      consumes:
      - application/json
      description: Create a new comment with provided details
      parameters:
      - description: Create comment
        in: body
        name: CommentDetails
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create comment
      tags:
      - Comment
  /v1/comment/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete comment
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete comment
      tags:
      - Comment
  /v1/comment/update/{id}:
    put:
      consumes:
      - application/json
      description: Update comment
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Update Comment
        in: body
        name: CommentInfo
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update comment
      tags:
      - Comment
  /v1/comments/{page}/{limit}:
    get:
      consumes:
      - application/json
      description: get all comments
      parameters:
      - description: page
        in: path
        name: page
        required: true
        type: string
      - description: limit
        in: path
        name: limit
        required: true
        type: string
      - description: orderBy
        enum:
        - content
        - created_at
        - updated_at
        in: query
        name: orderBy
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListComments'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get all comments
      tags:
      - Comment
  /v1/comments/{page}/{limit}/{user_id}:
    get:
      consumes:
      - application/json
      description: get all comments by user id
      parameters:
      - description: page
        in: path
        name: page
        required: true
        type: string
      - description: limit
        in: path
        name: limit
        required: true
        type: string
      - description: orderBy
        enum:
        - content
        - created_at
        - updated_at
        in: query
        name: orderBy
        type: string
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListComments'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get all comments
      tags:
      - Comment
  /v1/get/comments/{page}/{limit}/{post_id}:
    get:
      consumes:
      - application/json
      description: get all comments by post id
      parameters:
      - description: page
        in: path
        name: page
        required: true
        type: string
      - description: limit
        in: path
        name: limit
        required: true
        type: string
      - description: orderBy
        enum:
        - content
        - created_at
        - updated_at
        in: query
        name: orderBy
        type: string
      - description: post_id
        in: path
        name: post_id
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListComments'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get all comments
      tags:
      - Comment
  /v1/insert:
    get:
      consumes:
      - application/json
      description: Insert data to db(mongo)
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: data insertion
      tags:
      - Insertion
  /v1/post/{id}:
    get:
      consumes:
      - application/json
      description: Get post
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get post by id
      tags:
      - Post
  /v1/post/create:
    post:
      consumes:
      - application/json
      description: Insert a new post with provided details
      parameters:
      - description: Create post
        in: body
        name: PostDetails
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create post
      tags:
      - Post
  /v1/post/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete post
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete post
      tags:
      - Post
  /v1/post/dislike:
    put:
      consumes:
      - application/json
      description: Dislike post
      parameters:
      - description: Dislike Post
        in: body
        name: post_id
        required: true
        schema:
          $ref: '#/definitions/models.PostReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: dislike post
      tags:
      - Post
  /v1/post/like:
    put:
      consumes:
      - application/json
      description: Like post
      parameters:
      - description: Like Post
        in: body
        name: post_id
        required: true
        schema:
          $ref: '#/definitions/models.PostReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: like post
      tags:
      - Post
  /v1/post/update/{id}:
    put:
      consumes:
      - application/json
      description: Update post
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Update Post
        in: body
        name: PostInfo
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update post
      tags:
      - Post
  /v1/posts/{page}/{limit}:
    get:
      consumes:
      - application/json
      description: get all posts
      parameters:
      - description: page
        in: path
        name: page
        required: true
        type: string
      - description: limit
        in: path
        name: limit
        required: true
        type: string
      - description: orderBy
        enum:
        - content
        - title
        - category
        in: query
        name: orderBy
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListPosts'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get all posts
      tags:
      - Post
  /v1/posts/{page}/{limit}/{user_id}:
    get:
      consumes:
      - application/json
      description: get all posts by user id
      parameters:
      - description: page
        in: path
        name: page
        required: true
        type: string
      - description: limit
        in: path
        name: limit
        required: true
        type: string
      - description: orderBy
        enum:
        - content
        - title
        - category
        - created_at
        - updated_at
        in: query
        name: orderBy
        type: string
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListPosts'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get all posts
      tags:
      - Post
  /v1/rbac/add/policy:
    post:
      consumes:
      - application/json
      description: Add policy to a role
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: policy
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/models.AddPolicyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: add policy to a role
      tags:
      - Role-management
  /v1/rbac/delete/policy:
    delete:
      consumes:
      - application/json
      description: Delete policy
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: policy
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/models.AddPolicyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete policy
      tags:
      - Role-management
  /v1/rbac/policies/{role}:
    get:
      consumes:
      - application/json
      description: Get all policies of a role
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: role
        in: path
        name: role
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListRolePolicyResp'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all policies of a role
      tags:
      - Role-management
  /v1/rbac/roles:
    get:
      consumes:
      - application/json
      description: Get all roles
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RbacAllRolesResp'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all roles
      tags:
      - Role-management
  /v1/user:
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: id
        in: query
        name: id
        type: string
      - description: username
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserWithProducts'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get user by id
      tags:
      - User
  /v1/user/create:
    post:
      consumes:
      - application/json
      description: Create a new user with provided details
      parameters:
      - description: Create user
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create user
      tags:
      - User
  /v1/user/delete:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: id
        in: query
        name: id
        type: string
      - description: username
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete user
      tags:
      - User
  /v1/user/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: login user
      tags:
      - User
  /v1/user/refresh:
    post:
      consumes:
      - application/json
      description: get access token updated
      parameters:
      - description: refresh-token
        in: body
        name: refresh-token
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update access token
      tags:
      - User
  /v1/user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with provided details
      parameters:
      - description: Register user
        in: body
        name: User-data
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterUserResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: register user
      tags:
      - User
  /v1/user/update/{id}:
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Update User
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update user
      tags:
      - User
  /v1/user/verify/{email}/{code}:
    get:
      consumes:
      - application/json
      description: Verify a user with code sent to their email
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: code
        in: path
        name: code
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: verify user
      tags:
      - User
  /v1/users/{page}/{limit}:
    get:
      consumes:
      - application/json
      description: get all users
      parameters:
      - description: page
        in: path
        name: page
        required: true
        type: string
      - description: limit
        in: path
        name: limit
        required: true
        type: string
      - description: orderBy
        enum:
        - first_name
        - last_name
        - username
        - email
        - bio
        - website
        - created_at
        - updated_at
        in: query
        name: orderBy
        type: string
      - description: is_active
        enum:
        - true
        - false
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserWithProducts'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all users
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
